rbind(tabla_comparativa, c(names[i], sum$r.squared, sum$ajd.r.squared))
}
sum$r.squared
sum<-summary(modelo.1Y_CMaturiyRate)
sum$r.squared
rbind(tabla_comparativa, c(names[i], sum$r.squared, sum$ajd.r.squared))
tabla_comparativa<-data.frame()
tabla_comparativa
tabla_comparativa<-data.frame(nombre=names, R2=rsq, R2ajd=rsqadj)
rsq<-c()
rsqadj<-c()
for(i in 1:length(modelos)){
sum <- summary(modelos[i])
rsq<-c(rsq,sum$r.squared)
rsqadj<-c(rsqadj,sum$adj.r.squared)
}
tabla_comparativa<-data.frame(nombre=names, R2=rsq, R2ajd=rsqadj)
rsq<-c()
rsqadj<-c()
tabla_comparativa<-data.frame(nombre=names, R2=rsq, R2ajd=rsqadj)
rsq<-c()
rsqadj<-c()
for(i in 1:length(modelos)){
sum <- summary(modelos[i])
rsq<-c(rsq,sum$["r.squared"])
rsqadj<-c(rsqadj,sum["adj.r.squared"])
}
rsq<-c()
rsqadj<-c()
for(i in 1:length(modelos)){
sum <- summary(modelos[i])
rsq<-c(rsq,sum["r.squared"])
rsqadj<-c(rsqadj,sum["adj.r.squared"])
}
tabla_comparativa<-data.frame(nombre=names, R2=rsq, R2ajd=rsqadj)
rsq
rsqadj
tabla_comparativa<-data.frame(names, rsq, rsqadj)
summary(modelo.1Y_CMaturiyRate)["r.squared"]
summary(modelo.1Y_CMaturiyRate)["r.squared"][[1]]
rsq<-c()
rsqadj<-c()
for(i in 1:length(modelos)){
sum <- summary(modelos[i])
rsq<-c(rsq,sum["r.squared"][[1]])
rsqadj<-c(rsqadj,sum["adj.r.squared"][[1]])
}
tabla_comparativa<-data.frame(names, rsq, rsqadj)
rsq
rsq<-c()
rsqadj<-c()
for(i in 1:length(modelos)){
sum <- summary(modelos[i])
cat(sum)
rsq<-c(rsq,sum["r.squared"][[1]])
rsqadj<-c(rsqadj,sum["adj.r.squared"][[1]])
}
modelos[1]
modelo.1Y_CMaturiyRate
?write
library(tidyverse)
library(caret)
library(RSNNS)
library(frbs)
library(FSinR)
library(forecast)
inTraining <- createDataPartition(iris$Species, p = .75, list = FALSE)
training <- iris[inTraining,]
testing  <- iris[-inTraining,]
testing
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
knn <- train(Species ~ ., data = training,
method = "knn",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
predict(knn, testing[,-ncol(testing)])
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
knn <- train(Species ~ ., data = training,
method = "knn",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
testing
library(tidyverse)
library(caret)
library(RSNNS)
library(frbs)
library(FSinR)
library(forecast)
inTraining <- createDataPartition(iris$Species, p = .75, list = FALSE)
training <- iris[inTraining,]
testing  <- iris[-inTraining,]
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
knn <- train(Species ~ ., data = training,
method = "knn",
trControl = fitControl)
predict(knn, testing[,-ncol(testing)])
knitr::opts_knit$set(root.dir = "~/MEGA/Master/Series Temporales y mineria de flujos de datos/Practica 1/EjercicioGuiadoST")
parametros.H12<-lm(serieTr ~ tiempoTr)
knitr::opts_knit$set(root.dir = "~/MEGA/Master/Series Temporales y mineria de flujos de datos/Practica 1/EjercicioGuiadoST")
rm(list=ls())
library("tseries")
serie<-scan("pasajeros_1949_1959.dat")
NTest<-12
NPred<-12
serie.ts<-ts(serie, frequency=12)
plot(decompose(serie.ts))
serie.ts.log <- log(serie.ts)
serie.log <- log(serie)
plot(decompose(serie.ts.log))
serieTr<-serie.log[1:(length(serie.log)-NTest)]
tiempoTr<-1:length(serieTr)
serieTs<-serie.log[(length(serie.log)-NTest+1):length(serie.log)]
tiempoTs<-(length(serieTr)+1):length(serie.log)
length(serie.log)
length(serieTr)
length(serieTs)
tiempoTr
cat("#####################\n")
tiempoTs
plot.ts(serieTr)
lines(serieTs, col="red")
plot.ts(serieTr)
lines(tiempoTs,serieTs, col="red")
plot.ts(serieTr, xlim=c(1,tiempoTs[length(tiempoTs)]))
lines(tiempoTs,serieTs, col="red")
plot.ts(serieTr, xlim=c(1,tiempoTs[length(tiempoTs)]), ylim=c(4.5,6.5))
lines(tiempoTs,serieTs, col="red")
parametros.H12<-lm(serieTr ~ tiempoTr)
parametros.H12<-lm(serieTr ~ tiempoTr)
parametros.H12
TendEstimadaTr<-parametros.H12$coefficients[1] + tiempoTr*parametros.H12$coefficients[2]
TendEstimadaTs<-parametros.H12$coefficients[1] + tiempoTs*parametros.H12$coefficients[2]
lines(tiempoTr, TendEstimadaTr, col="blue")
?plot
plot(type="n")
plot(x=c(1,132) ,y=c(4.5,6.5),type="n")
lines(tiempoTr, TendEstimadaTr, col="blue")
lines(tiempoTs, TendEstimadaTs, col="green")
plot.ts(serieTr, xlim=c(1,tiempoTs[length(tiempoTs)]), ylim=c(4.5,6.5))
lines(tiempoTs,serieTs, col="red")
lines(tiempoTr, TendEstimadaTr, col="blue")
lines(tiempoTs, TendEstimadaTs, col="green")
knitr::opts_knit$set(root.dir = "~/MEGA/Master/Series Temporales y mineria de flujos de datos/Practica 1/EjercicioGuiadoST")
rm(list=ls())
library("tseries")
serie<-scan("pasajeros_1949_1959.dat")
NTest<-12
NPred<-12
serie.ts<-ts(serie, frequency=12)
plot(decompose(serie.ts))
serie.ts.log <- log(serie.ts)
serie.log <- log(serie)
plot(decompose(serie.ts.log))
serieTr<-serie.log[1:(length(serie.log)-NTest)]
tiempoTr<-1:length(serieTr)
serieTs<-serie.log[(length(serie.log)-NTest+1):length(serie.log)]
tiempoTs<-(length(serieTr)+1):length(serie.log)
length(serie.log)
length(serieTr)
length(serieTs)
tiempoTr
cat("#####################\n")
tiempoTs
plot.ts(serieTr)
lines(serieTs, col="red")
plot.ts(serieTr)
lines(tiempoTs,serieTs, col="red")
plot.ts(serieTr, xlim=c(1,tiempoTs[length(tiempoTs)]))
lines(tiempoTs,serieTs, col="red")
plot.ts(serieTr, xlim=c(1,tiempoTs[length(tiempoTs)]), ylim=c(4.5,6.5))
lines(tiempoTs,serieTs, col="red")
parametros.H1<-lm(serieTr ~ tiempoTr)
parametros.H1
TendEstimadaTr<-parametros.H1$coefficients[1] + tiempoTr*parametros.H1$coefficients[2]
TendEstimadaTs<-parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serieTr, xlim=c(1,tiempoTs[length(tiempoTs)]), ylim=c(4.5,6.5))
lines(tiempoTs,serieTs, col="red")
lines(tiempoTr, TendEstimadaTr, col="blue")
lines(tiempoTs, TendEstimadaTs, col="green")
JBTr<-jarque.bera.test(parametros.H1$residuals)
JBTs<-jarque.bera.test(TendEstimadaTs-serieTs)
JBTr<-jarque.bera.test(parametros.H1$residuals)
JBTs<-jarque.bera.test(TendEstimadaTs-serieTs)
JBTr
JBTr<-jarque.bera.test(parametros.H1$residuals)
JBTs<-jarque.bera.test(TendEstimadaTs-serieTs)
JBTr
JBTs
TT<-t.test(c(parametros.H1$residuals ,TendEstimadaTs-serieTs))
TT<-t.test(c(parametros.H1$residuals ,TendEstimadaTs-serieTs))
TT
?t.test
serieTr.SinTend<-serieTr-TendEstimadaTr
serieTs.SinTend<-serieTs-TendEstimadaTs
plot.ts(serieTr.SinTend, xlim=c(1,tiempoTs[length(tiempoTs)]), ylim=c(4.5,6.5))
lines(tiempoTs,serieTs.SinTend, col="red")
serieTr.SinTend<-serieTr-TendEstimadaTr
serieTs.SinTend<-serieTs-TendEstimadaTs
plot.ts(serieTr.SinTend, xlim=c(1,tiempoTs[length(tiempoTs)]), ylim=c(4.5,6.5))
lines(tiempoTs,serieTs.SinTend, col="red")
plot.ts(serieTr.SinTend, xlim=c(1,tiempoTs[length(tiempoTs)]))
lines(tiempoTs,serieTs.SinTend, col="red")
k<-12
estacionalidad<-decompose(serie.ts.log)$seasonal[1:k]
estacionalidad
aux<-rep(estacionalidad, length(serieTr)/length(estacionalidad))
aux<-rep(estacionalidad, length(serieTr)/length(estacionalidad))
aux
knitr::opts_knit$set(root.dir = "~/MEGA/Master/Series Temporales y mineria de flujos de datos/Practica 1/EjercicioGuiadoST")
rm(list=ls())
library("tseries")
serie<-scan("pasajeros_1949_1959.dat")
NTest<-12
NPred<-12
serie.ts<-ts(serie, frequency=12)
plot(decompose(serie.ts))
serie.ts.log <- log(serie.ts)
serie.log <- log(serie)
plot(decompose(serie.ts.log))
serieTr<-serie.log[1:(length(serie.log)-NTest)]
tiempoTr<-1:length(serieTr)
serieTs<-serie.log[(length(serie.log)-NTest+1):length(serie.log)]
tiempoTs<-(length(serieTr)+1):length(serie.log)
length(serie.log)
length(serieTr)
length(serieTs)
tiempoTr
cat("#####################\n")
tiempoTs
plot.ts(serieTr)
lines(serieTs, col="red")
plot.ts(serieTr)
lines(tiempoTs,serieTs, col="red")
plot.ts(serieTr, xlim=c(1,tiempoTs[length(tiempoTs)]))
lines(tiempoTs,serieTs, col="red")
plot.ts(serieTr, xlim=c(1,tiempoTs[length(tiempoTs)]), ylim=c(4.5,6.5))
lines(tiempoTs,serieTs, col="red")
parametros.H1<-lm(serieTr ~ tiempoTr)
parametros.H1
TendEstimadaTr<-parametros.H1$coefficients[1] + tiempoTr*parametros.H1$coefficients[2]
TendEstimadaTs<-parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serieTr, xlim=c(1,tiempoTs[length(tiempoTs)]), ylim=c(4.5,6.5))
lines(tiempoTs,serieTs, col="red")
lines(tiempoTr, TendEstimadaTr, col="blue")
lines(tiempoTs, TendEstimadaTs, col="green")
JBTr<-jarque.bera.test(parametros.H1$residuals)
JBTs<-jarque.bera.test(TendEstimadaTs-serieTs)
JBTr
JBTs
TT<-t.test(c(parametros.H1$residuals ,TendEstimadaTs-serieTs))
TT
serieTr.SinTend<-serieTr-TendEstimadaTr
serieTs.SinTend<-serieTs-TendEstimadaTs
plot.ts(serieTr.SinTend, xlim=c(1,tiempoTs[length(tiempoTs)]))
lines(tiempoTs,serieTs.SinTend, col="red")
k<-12
estacionalidad<-decompose(serie.ts.log)$seasonal[1:k]
estacionalidad
aux<-rep(estacionalidad, length(serieTr)/length(estacionalidad))
aux
serieTr.SinTend.SinEst<-serieTr.SinTend-aux
serieTr.SinTend.SinEst<-serieTr.SinTend-aux
serieTr.SinTend.SinEst<-serieTs.SinTend-estacionalidad
plot.ts(serieTr.SinTend.SinEst, xlim=c(1,tiempoTs[length(tiempoTs)]))
lines(tiempoTs,serieTs.SinTend.SinEst, col="red")
serieTr.SinTend.SinEst<-serieTr.SinTend-aux
serieTs.SinTend.SinEst<-serieTs.SinTend-estacionalidad
plot.ts(serieTr.SinTend.SinEst, xlim=c(1,tiempoTs[length(tiempoTs)]))
lines(tiempoTs,serieTs.SinTend.SinEst, col="red")
acf(serieTr.SinTend.SinEst)
?adf.test
adf.test(serieTr.SinTend.SinEst)
ADFTr<-adf.test(serieTr.SinTend.SinEst)
ADFTr
knitr::opts_knit$set(root.dir = "~/MEGA/Master/Series Temporales y mineria de flujos de datos/Practica 1/Practica1/datos")
source('~/MEGA/Master/Mineria de medios sociales/Practicas: Redes sociales y mineria de datos en redes/Practica 1/Entrega/plot_measures.R', echo=TRUE)
source('~/MEGA/Master/Mineria de medios sociales/Practicas: Redes sociales y mineria de datos en redes/Practica 1/Entrega/plot_measures.R', echo=TRUE)
source('~/MEGA/Master/Mineria de medios sociales/Practicas: Redes sociales y mineria de datos en redes/Practica 1/Entrega/plot_measures.R', echo=TRUE)
source('~/MEGA/Master/Mineria de medios sociales/Practicas: Redes sociales y mineria de datos en redes/Practica 1/Entrega/plot_measures.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_ros_plots.R', echo=TRUE)
setwd("~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes")
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_ros_plots.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_ros_plots.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_ros_plots.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_ros_plots.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_ros_plots.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_ros_plots.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_ros_plots.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_ros_plots.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
data
as.matrix(pipelines.dt, scores.dt)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
data
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
data
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
data
pipelines.dt
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
factor(pipelines.dt)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
data
factor(pipelines.dt)
factor(pipelines.dt, levels=names(sort(table(pipelines.dt), decreasing = FALSE)))
factor(pipelines.dt, levels=names(sort(table(pipelines.dt), decreasing = TRUE)))
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
p.dt
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
?ggsave
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
source('~/MEGA/Master/Big Data 2/Big Data y Big Analytics/Practica/Memoria/Imagenes/obtain_pipelines_comparison.R', echo=TRUE)
# Tiempos de entrenamiento
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM")
tiempos<-c(1250,350,6250,60000,20000)
data<-as.data.frame(cbind(modelos, tiempos))
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_entrenamiento.png",plot=p.dt, width = 7, height = 7)
library(ggplot2)
# Tiempos de entrenamiento
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM")
tiempos<-c(1250,350,6250,60000,20000)
data<-as.data.frame(cbind(modelos, tiempos))
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_entrenamiento.png",plot=p.dt, width = 7, height = 7)
setwd("/media/nacheteam/HDD Ubuntu/MEGA/Master/TFM/TFM/Memoria/imagenes")
library(ggplot2)
# Tiempos de entrenamiento
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM")
tiempos<-c(1250,350,6250,60000,20000)
data<-as.data.frame(cbind(modelos, tiempos))
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_entrenamiento.png",plot=p.dt, width = 7, height = 7)
# Tiempos de prediccion
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM", "FB LOF", "HBOS", "IForest", "KNN", "LODA", "LOF", "PCA")
tiempos<-c(7.6432,8.1478,9.3564,10.2187,8.5642,498.5435,2.224,48.9014,102.8687,1.5531,106.7117,1.732)
data<-as.data.frame(cbind(modelos, tiempos))
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_prediccion.png",plot=p.dt, width = 7, height = 7)
library(ggplot2)
# Tiempos de entrenamiento
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM")
tiempos<-as.double(c(1250,350,6250,60000,20000))
data<-as.data.frame(cbind(modelos, tiempos))
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_entrenamiento.png",plot=p.dt, width = 7, height = 7)
# Tiempos de prediccion
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM", "FB LOF", "HBOS", "IForest", "KNN", "LODA", "LOF", "PCA")
tiempos<-as.double(c(7.6432,8.1478,9.3564,10.2187,8.5642,498.5435,2.224,48.9014,102.8687,1.5531,106.7117,1.732))
data<-as.data.frame(cbind(modelos, tiempos))
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_prediccion.png",plot=p.dt, width = 7, height = 7)
library(ggplot2)
# Tiempos de entrenamiento
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM")
modelos<-as.factor(modelos, levels=c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM"))
tiempos<-as.double(c(1250,350,6250,60000,20000))
data<-as.data.frame(cbind(modelos, tiempos))
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_entrenamiento.png",plot=p.dt, width = 7, height = 7)
# Tiempos de prediccion
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM", "FB LOF", "HBOS", "IForest", "KNN", "LODA", "LOF", "PCA")
modelos<-as.factor(modelos, levels=c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM", "FB LOF", "HBOS", "IForest", "KNN", "LODA", "LOF", "PCA"))
tiempos<-as.double(c(7.6432,8.1478,9.3564,10.2187,8.5642,498.5435,2.224,48.9014,102.8687,1.5531,106.7117,1.732))
data<-as.data.frame(cbind(modelos, tiempos))
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_prediccion.png",plot=p.dt, width = 7, height = 7)
library(ggplot2)
# Tiempos de entrenamiento
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM")
modelos<-as.factor(modelos, levels=c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM"))
tiempos<-as.double(c(1250,350,6250,60000,20000))
data<-as.data.frame(cbind(modelos, tiempos))
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_entrenamiento.png",plot=p.dt, width = 7, height = 7)
# Tiempos de prediccion
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM", "FB LOF", "HBOS", "IForest", "KNN", "LODA", "LOF", "PCA")
modelos<-as.factor(modelos, levels=c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM", "FB LOF", "HBOS", "IForest", "KNN", "LODA", "LOF", "PCA"))
tiempos<-as.double(c(7.6432,8.1478,9.3564,10.2187,8.5642,498.5435,2.224,48.9014,102.8687,1.5531,106.7117,1.732))
data<-as.data.frame(cbind(modelos, tiempos))
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_prediccion.png",plot=p.dt, width = 7, height = 7)
View(p.dt)
View(data)
tiempos
tiempos$value
class(tiempos)
type(tiempos)
as.double(tiempos)
class(as.double(tiempos))
library(ggplot2)
# Tiempos de entrenamiento
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM")
tiempos<-c(1250,350,6250,60000,20000)
data<-as.data.frame(cbind(modelos, tiempos))
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_entrenamiento.png",plot=p.dt, width = 7, height = 7)
# Tiempos de prediccion
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM", "FB LOF", "HBOS", "IForest", "KNN", "LODA", "LOF", "PCA")
tiempos<-c(7.6432,8.1478,9.3564,10.2187,8.5642,498.5435,2.224,48.9014,102.8687,1.5531,106.7117,1.732)
data<-as.data.frame(cbind(modelos, tiempos))
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_prediccion.png",plot=p.dt, width = 7, height = 7)
library(ggplot2)
# Tiempos de entrenamiento
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM")
tiempos<-c(1250,350,6250,60000,20000)
data<-as.data.frame(cbind(modelos, tiempos))
data$value = as.double(levels(data$value))[data$value]
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_entrenamiento.png",plot=p.dt, width = 7, height = 7)
library(ggplot2)
# Tiempos de entrenamiento
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM")
tiempos<-c(1250,350,6250,60000,20000)
data<-as.data.frame(cbind(modelos, tiempos))
data$tiempos = as.double(levels(data$tiempos))[data$tiempos]
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_entrenamiento.png",plot=p.dt, width = 7, height = 7)
library(ggplot2)
# Tiempos de entrenamiento
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM")
tiempos<-c(1250,350,6250,60000,20000)
data<-as.data.frame(cbind(modelos, tiempos))
data$tiempos = as.double(levels(data$tiempos))[data$tiempos]
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_entrenamiento.png",plot=p.dt, width = 7, height = 7)
# Tiempos de prediccion
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM", "FB LOF", "HBOS", "IForest", "KNN", "LODA", "LOF", "PCA")
tiempos<-c(7.6432,8.1478,9.3564,10.2187,8.5642,498.5435,2.224,48.9014,102.8687,1.5531,106.7117,1.732)
data<-as.data.frame(cbind(modelos, tiempos))
data$tiempos = as.double(levels(data$tiempos))[data$tiempos]
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_prediccion.png",plot=p.dt, width = 7, height = 7)
# Tiempos de prediccion sin FB LOF
modelos<-c("AE Fully Connected", "AE FC lotes", "AE LSTM", "Pred. LSTM", "Pred. CNN-LSTM", "HBOS", "IForest", "KNN", "LODA", "LOF", "PCA")
tiempos<-c(7.6432,8.1478,9.3564,10.2187,8.5642,2.224,48.9014,102.8687,1.5531,106.7117,1.732)
data<-as.data.frame(cbind(modelos, tiempos))
data$tiempos = as.double(levels(data$tiempos))[data$tiempos]
p.dt<-ggplot(data, aes(x=modelos, y=tiempos, fill=modelos)) +
geom_bar(stat="identity")+theme_minimal()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title="Tiempos de entrenamiento", x="Modelos", y="Tiempos (s)", fill="Modelos")
ggsave(filename = "tiempos_prediccion2.png",plot=p.dt, width = 7, height = 7)
